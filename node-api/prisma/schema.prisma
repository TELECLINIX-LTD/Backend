// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  LOCAL
  GOOGLE
  FACEBOOK
  APPLE
}

enum Role {
  ADMIN
  PATIENT
  PROVIDER
}

model Patient {
  id                   String          @id @default(cuid())
  firstName            String
  lastName             String
  dateOfBirth          DateTime
  gender               String
  address              String
  contactNumber        String
  emergencyContact     String
  insuranceInformation String?
  healthcareProviders  Provider[]      @relation("PatientProviders")
  appointments         Appointment[]
  medicalRecords       MedicalRecord[]
  labTests             LabTest[]
  notifications        Notification[]
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  emailVerified    DateTime?
  firstName        String?
  lastName         String?
  Image            String?
  password         String?
  role             Role      @default(PATIENT)
  messagesSent     Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")

  authType AuthType @default(LOCAL)

  socialProviderId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([authType, socialProviderId])
}

model Provider {
  id                 String         @id @default(cuid())
  firstName          String
  lastName           String
  specialization     String
  affiliation        String
  contactInformation String
  appointments       Appointment[]
  patients           Patient[]      @relation("PatientProviders")
  notifications      Notification[]
}

model Appointment {
  id              String   @id @default(cuid())
  patientId       String
  providerId      String
  appointmentDate DateTime
  appointmentTime DateTime
  reasonForVisit  String
  status          String   @default("Scheduled")

  patient  Patient  @relation(fields: [patientId], references: [id])
  provider Provider @relation(fields: [providerId], references: [id])
}

model MedicalRecord {
  id                    String   @id @default(cuid())
  patientId             String
  visitDate             DateTime
  diagnosis             String
  symptoms              String
  medicationsPrescribed String?
  testResults           String?
  vitalSigns            String

  patient Patient @relation(fields: [patientId], references: [id])
}

model LabTest {
  id                       String   @id @default(cuid())
  patientId                String
  testName                 String
  testDate                 DateTime
  results                  String
  additionalConsiderations String?

  patient Patient @relation(fields: [patientId], references: [id])
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  recipientId String
  content     String
  timestamp   DateTime

  sender    User @relation("MessagesSent", fields: [senderId], references: [id])
  recipient User @relation("MessagesReceived", fields: [recipientId], references: [id])
}

model Notification {
  id         String   @id @default(cuid())
  patientId  String
  providerId String
  type       String
  content    String
  sentDate   DateTime

  patient  Patient  @relation(fields: [patientId], references: [id])
  provider Provider @relation(fields: [providerId], references: [id])
}
